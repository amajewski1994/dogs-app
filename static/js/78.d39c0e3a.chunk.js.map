{"version":3,"file":"static/js/78.d39c0e3a.chunk.js","mappings":"qKAKA,MA0FA,EAvFeA,KAEX,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KACtCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,IAE7CO,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAU,IAAIP,GACpBQ,EAAaD,EAAQ,GACtB,CAACL,KAEJI,EAAAA,EAAAA,YAAU,MACNG,iBACI,IACE,MAAMC,QAAiBC,MAlBzB,uCAmBE,IAAKD,EAASE,GACZ,MAAM,IAAIC,MAAM,oBAADC,OAAqBJ,EAASK,SAG/C,MAAMC,QAAaN,EAASM,OAC5BlB,EAAUkB,GACVf,EAAae,EACf,CAAE,MAAOC,GACPC,QAAQD,MAAMA,EAAME,QACtB,CACF,CACAC,EAAS,GACZ,IAEH,MAAMZ,EAAgBD,IAClB,MAAMc,EAAiBd,EAAQe,QAAOC,GAC3BA,EAAMC,KAAKC,cAAcC,SAASxB,EAAWuB,iBAExD3B,EAAUuB,EAAe,EAavBM,EAAa9B,EAAO+B,KAAI,CAACL,EAAOM,KAClC,KAAIA,EAlDM,GAkDWzB,GAAgByB,GAlD3B,IAkD8CzB,EAAa,IACrE,OAAO0B,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAIT,EAAMU,mBAAmBC,UAAUC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAChDJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,cAAaF,SACvBX,EAAMC,QAEXM,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBAAoBF,SAC9BX,EAAMc,eALiCR,EAQzC,IAGLS,EAAuB,IAAIC,MAAMC,KAAKC,KAAK5C,EAAO6C,OA9D1C,KA8D+DC,QAAQf,KAAI,CAACgB,EAASf,KACxFC,EAAAA,EAAAA,KAAA,MAAaM,UAAS,GAAAtB,OAAKV,IAAeyB,GAAM,UAAYgB,QAASA,IAlBtDhB,KACtBxB,EAAcwB,EAAG,EAiBiEiB,CAAiBjB,GAAIK,SAAEU,EAAU,GAAnGf,KAItB,OACEC,EAAAA,EAAAA,KAAA,OAAKM,UAAU,SAAQF,UACnBJ,EAAAA,EAAAA,KAACiB,EAAAA,EAAI,CAAAb,UACDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EACxBJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,iCACJJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBAAoBF,UACnCJ,EAAAA,EAAAA,KAAA,SAAOkB,YAAY,aAAaC,SAlCvBC,IACjB,MAAMC,EAAQD,EAAEE,OAAOD,MACvBhD,EAAcgD,GACd9C,EAAc,EAAE,OAiCRyB,EAAAA,EAAAA,KAAA,MAAIM,UAAU,yBAAwBF,SACjCrC,EAAO6C,OAAS,EAAIf,GAAaG,EAAAA,EAAAA,KAAA,MAAAI,SAAI,6CAE1CJ,EAAAA,EAAAA,KAAA,OAAKM,UAAU,aAAYF,UACvBJ,EAAAA,EAAAA,KAAA,MAAIM,UAAU,6BAA4BF,SACrCrC,EAAO6C,OAAS,GAAKJ,YAKpC,C,oDCzFV,MAQA,EARae,IAAiB,IAAhB,SAACnB,GAASmB,EACtB,OACEvB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,OAAMF,SAChBA,GACC,C","sources":["components/Breeds/Breeds.js","shared/Card.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Card from '../../shared/Card'\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst url = 'https://api.thedogapi.com/v1/breeds'\r\nconst maxLength = 21\r\n\r\nconst Breeds = () => {\r\n\r\n    const [breeds, setBreeds] = useState([])\r\n    const [allBreeds, setAllBreeds] = useState([])\r\n    const [searchName, setSearchName] = useState('')\r\n    const [activePage, setActivePage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const _breeds = [...allBreeds]\r\n        filterBreeds(_breeds)\r\n    }, [searchName])\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            try {\r\n              const response = await fetch(url);\r\n              if (!response.ok) {\r\n                throw new Error(`Response status: ${response.status}`);\r\n              }\r\n          \r\n              const json = await response.json();\r\n              setBreeds(json);\r\n              setAllBreeds(json);\r\n            } catch (error) {\r\n              console.error(error.message);\r\n            }\r\n          }\r\n          getData()\r\n    }, [])\r\n\r\n    const filterBreeds = (_breeds) => {\r\n        const filteredBreeds = _breeds.filter(breed => {\r\n            return breed.name.toUpperCase().includes(searchName.toUpperCase()) \r\n        })\r\n        setBreeds(filteredBreeds)\r\n    }\r\n\r\n    const inputChange = (e) => {\r\n        const value = e.target.value\r\n        setSearchName(value)\r\n        setActivePage(0)\r\n    }\r\n\r\n    const pageClickHandler = (id) => {\r\n        setActivePage(id)\r\n    }\r\n\r\n    const breedsList = breeds.map((breed, id) => {\r\n        if((id < maxLength * activePage) || (id >= maxLength * (activePage + 1))) return;\r\n        return <Link to={breed.reference_image_id} key={id}><li>\r\n            <div className='breeds-name'>\r\n                {breed.name}\r\n            </div>\r\n            <div className='breeds-description'>\r\n                {breed.bred_for}\r\n            </div>\r\n        </li>\r\n        </Link>\r\n    })\r\n\r\n    const breedsListPagination = [...Array(Math.ceil(breeds.length / maxLength)).keys()].map((element, id) => {\r\n        return <li key={id} className={`${activePage === id && 'active'}`} onClick={() => pageClickHandler(id)}>{element + 1}</li>\r\n    })\r\n    \r\n\r\n  return (\r\n    <div className='breeds'>\r\n        <Card>\r\n            <div className='breeds-list'>\r\n                <h2>Search your favourite breed</h2>\r\n                <div className='breeds-list-search'>\r\n                <input placeholder='type breed' onChange={inputChange}></input>\r\n                </div>\r\n                <ul className='breeds-list__container'>\r\n                    {breeds.length > 0 ? breedsList : <h3>No results, try typing something else</h3>}\r\n                </ul>\r\n                <div className='pagination'>\r\n                    <ul className='pagination-list__container'>\r\n                        {breeds.length > 0 && breedsListPagination}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Breeds","import React from 'react'\r\n\r\nconst Card = ({children}) => {\r\n  return (\r\n    <div className='card'>\r\n        {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card"],"names":["Breeds","breeds","setBreeds","useState","allBreeds","setAllBreeds","searchName","setSearchName","activePage","setActivePage","useEffect","_breeds","filterBreeds","async","response","fetch","ok","Error","concat","status","json","error","console","message","getData","filteredBreeds","filter","breed","name","toUpperCase","includes","breedsList","map","id","_jsx","Link","to","reference_image_id","children","_jsxs","className","bred_for","breedsListPagination","Array","Math","ceil","length","keys","element","onClick","pageClickHandler","Card","placeholder","onChange","e","value","target","_ref"],"sourceRoot":""}